import scanpy as sc
import numpy as np
import pandas as pd

#Generated by Claude AI
def pseudobulk_methods(adata, 
                       groupby='sample', 
                       cell_type_col='cell_type', 
                       method='sum'):
    """
    Create pseudobulk AnnData using different aggregation methods.
    
    Parameters:
    -----------
    adata : AnnData
        Input single-cell AnnData object
    groupby : str, optional (default='sample')
        Observation annotation to group samples
    cell_type_col : str, optional (default='cell_type')
        Column containing cell type annotations
    method : str, optional (default='sum')
        Aggregation method. Options:
        - 'sum': Sum of all cells
        - 'mean': Mean expression across cells
        - 'median': Median expression across cells
        - 'weighted_mean': Weighted mean by UMI counts
        - 'prop_expressing': Proportion of cells expressing each gene
    
    Returns:
    --------
    AnnData
        Pseudobulk AnnData object
    """
    # Validate inputs
    for col in [groupby, cell_type_col]:
        if col not in adata.obs.columns:
            raise ValueError(f"Column '{col}' not found in adata.obs")
    
    # Supported methods
    valid_methods = ['sum', 'mean', 'median', 'weighted_mean', 'prop_expressing']
    if method not in valid_methods:
        raise ValueError(f"Method must be one of {valid_methods}")
    
    # Prepare to aggregate data
    data_to_aggregate = adata.X
    
    # Get unique groups and cell types
    groups = adata.obs[groupby].unique()
    cell_types = adata.obs[cell_type_col].unique()
    
    # Prepare pseudobulk data storage
    pseudobulk_data = []
    pseudobulk_obs = []
    
    # Aggregate across samples and cell types
    for group in groups:
        for cell_type in cell_types:
            # Select cells for this group and cell type
            group_mask = (adata.obs[groupby] == group) & (adata.obs[cell_type_col] == cell_type)
            group_data = data_to_aggregate[group_mask]
            
            # Skip if no cells in this group and cell type
            if group_data.shape[0] == 0:
                continue
            
            # Aggregation methods
            if method == 'sum':
                aggregated_data = group_data.sum(axis=0)
            
            elif method == 'mean':
                aggregated_data = group_data.mean(axis=0)
            
            elif method == 'median':
                aggregated_data = np.median(group_data.toarray(), axis=0)
            
            elif method == 'weighted_mean':
                # Requires UMI count information
                if 'n_counts' not in adata.obs.columns:
                    raise ValueError("Weighted mean requires 'n_counts' in adata.obs")
                
                cell_weights = adata.obs.loc[group_mask, 'n_counts']
                cell_weights = cell_weights / cell_weights.sum()
                
                # Weighted average
                aggregated_data = np.average(group_data.toarray(), 
                                             weights=cell_weights, 
                                             axis=0)
            
            elif method == 'prop_expressing':
                # Proportion of cells expressing each gene (above 0)
                aggregated_data = (group_data > 0).mean(axis=0)
            
            # Store results
            pseudobulk_data.append(aggregated_data)
            pseudobulk_obs.append(f"{group}_{cell_type}")
    
    # Convert to array
    pseudobulk_data = np.array(pseudobulk_data)
    
    # Create new AnnData object
    pseudobulk_adata = sc.AnnData(
        X=pseudobulk_data, 
        obs=pd.DataFrame(
            index=pseudobulk_obs,
            data={
                'sample': [obs.split('_')[0] for obs in pseudobulk_obs],
                'cell_type': [obs.split('_')[1] for obs in pseudobulk_obs]
            }
        ),
        var=adata.var.copy()
    )
    
    return pseudobulk_adata

# Example usage demonstrating different methods
def example_pseudobulk_workflow(adata):
    """
    Demonstrate different pseudobulking approaches
    """
    # Preprocessing steps
    sc.pp.normalize_total(adata, target_sum=1e4)
    sc.pp.log1p(adata)
    
    # Different pseudobulk methods
    methods = ['sum', 'mean', 'median', 'weighted_mean', 'prop_expressing']
    
    pseudobulk_results = {}
    for method in methods:
        try:
            pseudobulk_results[method] = pseudobulk_methods(
                adata, 
                groupby='sample', 
                cell_type_col='cell_type', 
                method=method
            )
            print(f"Pseudobulk method '{method}' completed successfully")
        except Exception as e:
            print(f"Error with method {method}: {e}")
    
    return pseudobulk_results

# Additional utility function for comparing methods
def compare_pseudobulk_methods(pseudobulk_results):
    """
    Compare pseudobulk results across different methods
    
    Parameters:
    -----------
    pseudobulk_results : dict
        Dictionary of pseudobulk AnnData objects from different methods
    
    Returns:
    --------
    Prints comparison statistics
    """
    print("Pseudobulk Method Comparison:")
    for method, adata in pseudobulk_results.items():
        print(f"\n{method.upper()} Method:")
        print(f"  Number of pseudobulk samples: {adata.n_obs}")
        print(f"  Number of genes: {adata.n_vars}")
        print(f"  Data range: [{adata.X.min():.2f}, {adata.X.max():.2f}]")